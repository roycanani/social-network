{
  "openapi": "3.0.0",
  "info": {
    "title": "Web Dev 2025 REST API",
    "version": "1.0.0",
    "description": "REST server including authentication using JWT by Roy Canani & Urir Shiber"
  },
  "servers": [{ "url": "http://localhost:4000" }],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AuthRegister" }
            }
          }
        },
        "responses": {
          "200": { "description": "User registered successfully" },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login a user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AuthLogin" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh the access token",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "The refresh token"
                  }
                },
                "example": { "refreshToken": "refresh_token_example" }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/AuthResponse" }
              }
            }
          },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout a user",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "The refresh token"
                  }
                },
                "example": { "refreshToken": "refresh_token_example" }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User logged out successfully" },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "The list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "201": { "description": "User created successfully" },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a user by ID",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The user description by ID",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "404": { "description": "User not found" }
        }
      },
      "put": {
        "summary": "Update a user by ID",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The user ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated successfully" },
          "400": { "description": "Invalid input" },
          "404": { "description": "User not found" }
        },
        "security": [{ "bearerAuth": [] }]
      },
      "delete": {
        "summary": "Delete a user by ID",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": { "description": "User deleted successfully" },
          "404": { "description": "User not found" }
        },
        "security": [{ "bearerAuth": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "AuthRegister": {
        "type": "object",
        "required": ["email", "password", "userName"],
        "properties": {
          "email": { "type": "string", "description": "The email of the user" },
          "password": {
            "type": "string",
            "description": "The password of the user"
          },
          "userName": {
            "type": "string",
            "description": "The username of the user"
          }
        },
        "example": {
          "email": "user@example.com",
          "password": "password123",
          "userName": "user123"
        }
      },
      "AuthLogin": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": { "type": "string", "description": "The email of the user" },
          "password": {
            "type": "string",
            "description": "The password of the user"
          }
        },
        "example": { "email": "user@example.com", "password": "password123" }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "The refresh token"
          },
          "_id": { "type": "string", "description": "The user ID" }
        },
        "example": {
          "accessToken": "access_token_example",
          "refreshToken": "refresh_token_example",
          "_id": "user_id_example"
        }
      },
      "User": {
        "type": "object",
        "required": ["name", "email"],
        "properties": {
          "userName": {
            "type": "string",
            "description": "The name of the user"
          },
          "email": { "type": "string", "description": "The email of the user" },
          "password": {
            "type": "string",
            "description": "The email of the user"
          }
        },
        "example": {
          "userName": "John Doe",
          "email": "john.doe@example.com",
          "password": "password123"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    { "name": "Auth", "description": "The Authentication API" },
    { "name": "Users", "description": "The Users API" }
  ]
}
